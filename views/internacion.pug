extends layout

block content
  .container.mt-4
    h2.mb-4 Nueva Internación

    form(method="POST", action="/internacion/crear", id="form-internacion")
      .mb-3
        label.form-label(for="id_paciente") Paciente:
        select.form-select(name="id_paciente", id="id_paciente", required)
          option(value="" disabled selected) Seleccionar paciente
          each paciente in pacientes
            option(
              value=paciente.id_paciente 
              selected=(datosPrevios && datosPrevios.id_paciente == paciente.id_paciente)
            )= paciente.nombre + ' ' + paciente.apellido
        small.text-danger#error-paciente

      .mb-3
        label.form-label(for="fecha_ingreso") Fecha de ingreso:
        input.form-control(type="date", name="fecha_ingreso", id="fecha_ingreso", required value=datosPrevios ? datosPrevios.fecha_ingreso : '')
        small.text-danger#error-fecha

      .mb-3
        label.form-label(for="id_motivo") Motivo de internación:
        select.form-select(name="id_motivo", id="id_motivo", required)
          option(value="" disabled selected) Seleccionar motivo
          each motivo in motivos
            option(
              value=motivo.id_motivo 
              selected=(datosPrevios && datosPrevios.id_motivo == motivo.id_motivo)
            )= motivo.descripcion
        small.text-danger#error-motivo

      .mb-3
        label.form-label(for="descripcion") Descripción adicional del motivo (opcional):
        textarea.form-control(name="descripcion", id="descripcion", rows="3", placeholder="Agregar una descripción adicional al motivo si corresponde")= datosPrevios ? datosPrevios.descripcion : ''

      .mb-3
        label.form-label(for="id_ala") Ala:
        select.form-select#ala-select(name="id_ala", required)
          option(value="" disabled selected) Seleccionar ala
          each ala in alas
            option(
              value=ala.id_ala 
              selected=(datosPrevios && datosPrevios.id_ala == ala.id_ala)
            )= ala.nombre
        small.text-danger#error-ala

      .mb-3
        label.form-label(for="id_habitacion") Habitación:
        select.form-select#habitacion-select(name="id_habitacion", required)
          option(value="" disabled selected) Seleccionar habitación
        small.text-danger#error-habitacion

      .mb-3
        label.form-label(for="id_cama") Cama:
        select.form-select#cama-select(name="id_cama", required)
          option(value="" disabled selected) Seleccionar cama
        small.text-danger#error-cama

      button.btn.btn-primary(type="submit") Internar Paciente

  if error
    .alert.alert-danger.mt-4 #{error}

  script.
    const habitaciones = !{JSON.stringify(habitaciones)};
    const camas = !{JSON.stringify(camas)};
    const datosPrevios = !{JSON.stringify(datosPrevios || {})};

    const habSelect = document.getElementById('habitacion-select');
    const camaSelect = document.getElementById('cama-select');
    const alaSelect = document.getElementById('ala-select');

    function limpiarSelect(select, label) {
      select.innerHTML = '';
      const opt = new Option(label, '', true, true);
      opt.disabled = true;
      select.appendChild(opt);
    }

    function cargarHabitaciones(idAla) {
      limpiarSelect(habSelect, 'Seleccionar habitación');
      limpiarSelect(camaSelect, 'Seleccionar cama');
      habSelect.disabled = false;
      camaSelect.disabled = true;

      const filteredHab = habitaciones.filter(h => h.id_ala == idAla);
      filteredHab.forEach(h => {
        const opt = new Option(`Habitación ${h.numero}`, h.id_habitacion);
        if (datosPrevios.id_habitacion == h.id_habitacion) {
          opt.selected = true;
        }
        habSelect.appendChild(opt);
      });
    }

    function cargarCamas(idHabitacion) {
      limpiarSelect(camaSelect, 'Seleccionar cama');
      camaSelect.disabled = false;

      const filteredCamas = camas.filter(c => c.id_habitacion == idHabitacion);
      filteredCamas.forEach(c => {
        const opt = new Option(`${c.numero} (${c.estado})`, c.id_cama);
        const estado = c.estado.trim().toLowerCase();
        if (!['libre', 'higienizada', 'disponible'].includes(estado)) {
          opt.disabled = true;
          opt.style.color = 'gray';
        } else {
          opt.style.color = 'green';
        }
        if (datosPrevios.id_cama == c.id_cama) {
          opt.selected = true;
        }
        camaSelect.appendChild(opt);
      });
    }

    alaSelect.addEventListener('change', () => {
      cargarHabitaciones(alaSelect.value);
      clearError('ala');
    });

    habSelect.addEventListener('change', () => {
      cargarCamas(habSelect.value);
      clearError('habitacion');
    });

    // Si hay datos previos, cargar selects correspondientes
    if (datosPrevios.id_ala) {
      cargarHabitaciones(datosPrevios.id_ala);
    }
    if (datosPrevios.id_habitacion) {
      cargarCamas(datosPrevios.id_habitacion);
    }

    // Validación al enviar
    document.getElementById('form-internacion').addEventListener('submit', function (e) {
      const paciente = document.getElementById('id_paciente').value;
      const fechaIngreso = document.getElementById('fecha_ingreso').value;
      const motivo = document.getElementById('id_motivo').value;
      const ala = alaSelect.value;
      const habitacion = habSelect.value;
      const cama = camaSelect.value;

      let errores = 0;

      if (!paciente) {
        showError('paciente', 'Debe seleccionar un paciente.');
        errores++;
      }

      if (!fechaIngreso) {
        showError('fecha', 'Debe ingresar una fecha.');
        errores++;
      } else {
        const hoy = new Date().toISOString().split('T')[0];
        if (fechaIngreso > hoy) {
          showError('fecha', 'La fecha no puede ser futura.');
          errores++;
        } else {
          clearError('fecha');
        }
      }

      if (!motivo) {
        showError('motivo', 'Debe seleccionar un motivo.');
        errores++;
      } else {
        clearError('motivo');
      }

      if (!ala) {
        showError('ala', 'Debe seleccionar un ala.');
        errores++;
      }

      if (!habitacion) {
        showError('habitacion', 'Debe seleccionar una habitación.');
        errores++;
      }

      if (!cama) {
        showError('cama', 'Debe seleccionar una cama.');
        errores++;
      } else {
        const camaSeleccionada = camas.find(c => c.id_cama == cama);
        const estado = camaSeleccionada?.estado?.trim().toLowerCase();
        if (!['libre', 'higienizada', 'disponible'].includes(estado)) {
          showError('cama', 'La cama seleccionada no está disponible.');
          errores++;
        }
      }

      if (errores > 0) {
        e.preventDefault();
      }
    });

    function showError(id, mensaje) {
      document.getElementById(`error-${id}`).textContent = mensaje;
    }

    function clearError(id) {
      document.getElementById(`error-${id}`).textContent = '';
    }

    document.getElementById('id_paciente').addEventListener('change', () => clearError('paciente'));
    document.getElementById('id_motivo').addEventListener('change', () => clearError('motivo'));
    document.getElementById('fecha_ingreso').addEventListener('input', () => clearError('fecha'));
