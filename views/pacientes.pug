extends layout

block content
  .container.mt-5
    h1.text-center Pacientes Activos

    // Contadores
    .row.text-center.mb-4
      .col-md-4
        .card.text-bg-light
          .card-body(style="background-color:rgb(66, 180, 123);")
            h5 Total de Pacientes
            h3#totalPacientes
      .col-md-4
        .card.text-bg-primary.text-white
          .card-body(style="background-color: #f8c8dc;") 
            h5 Femeninos
            h3#totalFemenino
      .col-md-4
        .card.text-bg-success.text-white
          .card-body(style="background-color: #add8e6;")
            h5 Masculinos
            h3#totalMasculino

    // Botón para abrir modal nuevo paciente
    .d-flex.justify-content-end.mb-3
      button.btn.btn-primary(data-bs-toggle="modal", data-bs-target="#nuevoPacienteModal")
        | + Nuevo Paciente

    // Tabla
    table#tablaPacientes.table.table-striped.table-hover
      thead
        tr
          th DNI
          th Nombre
          th Apellido
          th Edad
          th Género
          th Teléfono
          th Obra Social
          th Estado
          th Acciones
      tbody
        each paciente in pacientes
          tr
            td= paciente.dni
            td= paciente.nombre
            td= paciente.apellido
            td= paciente.edad
            td= paciente.genero
            td= paciente.telefono
            td= paciente.obraSocial ? paciente.obraSocial.nombre : 'No Posee'
            td
              button.btn(
                class=paciente.estado === 'Activo' ? 'btn-success' : 'btn-secondary',
                onclick=`toggleEstado(${paciente.id_paciente}, this)`
              )= paciente.estado
            td
              a.btn.btn-sm.btn-outline-primary(href=`/pacientes/${paciente.id_paciente}/editar`) Editar

    // Modal nuevo paciente
    .modal.fade#nuevoPacienteModal(tabindex='-1')
      .modal-dialog.modal-lg
        .modal-content
          .modal-header
            h5.modal-title Nuevo Paciente
            button.btn-close(type='button', data-bs-dismiss='modal')
          form(action='/pacientes', method='POST', id='formPaciente', novalidate)
            .modal-body
              .row
                .col-md-6
                  label.form-label Nombre
                  input.form-control(type='text', name='nombre', required pattern='^[A-Za-zÁÉÍÓÚáéíóúÑñ ]+$')
                  div.text-danger.d-none Nombre inválido. Solo letras.
                .col-md-6
                  label.form-label Apellido
                  input.form-control(type='text', name='apellido', required pattern='^[A-Za-zÁÉÍÓÚáéíóúÑñ ]+$')
                  div.text-danger.d-none Apellido inválido. Solo letras.
              .row.mt-2
                .col-md-4
                  label.form-label DNI
                  input.form-control(type='text', name='dni', required pattern='^[0-9]+$')
                  div.text-danger.d-none DNI inválido. Solo números.
                .col-md-4
                  label.form-label Género
                  select.form-select(name='genero', required)
                    option(value='') Seleccionar
                    option(value='Masculino') Masculino
                    option(value='Femenino') Femenino
                  div.text-danger.d-none Seleccione un género.
                .col-md-4
                  label.form-label Fecha de Nacimiento
                  input.form-control(type='date', name='fecha_nacimiento', required, max='')
                  div.text-danger.d-none Fecha no puede ser futura.
              .row.mt-2
                .col-md-4
                  label.form-label Altura (cm)
                  input.form-control(type='number', name='altura', min='0')
                  div.text-danger.d-none Altura inválida. No puede ser negativa.
                .col-md-4
                  label.form-label Peso (kg)
                  input.form-control(type='number', name='peso', min='0')
                  div.text-danger.d-none Peso inválido. No puede ser negativo.
                .col-md-4
                  label.form-label Teléfono
                  input.form-control(type='text', name='telefono')
              .row.mt-2
                .col-md-6
                  label.form-label Contacto de Emergencia
                  input.form-control(type='text', name='contacto_emergencia')
                .col-md-6
                  label.form-label Dirección
                  input.form-control(type='text', name='direccion')
              .row.mt-2
                .col-md-6
                  label.form-label Obra Social
                  select.form-select(name='id_obra_social')
                    option(value='') Sin obra social
                    each obra in obrasSociales
                      option(value=obra.id_obra_social)= obra.nombre
                .col-md-6
                  label.form-label Estado
                  select.form-select(name='estado', required)
                    option(value='Activo') Activo
                    option(value='Inactivo') Inactivo
            .modal-footer
              button.btn.btn-secondary(type='button', data-bs-dismiss='modal') Cancelar
              button.btn.btn-primary(type='submit') Guardar

    // Toast de estado
    .position-fixed.bottom-0.end-0.p-3(style='z-index: 11')
      .toast#estadoToast(role='alert', aria-live='assertive', aria-atomic='true')
        .toast-header
          strong.me-auto Estado del Paciente
          small.text-muted Ahora
          button.btn-close(type='button', data-bs-dismiss='toast')
        .toast-body#toastBody

  script(src='https://code.jquery.com/jquery-3.6.0.min.js')
  script(src='https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js')
  script(src='https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js')

  script.
    document.addEventListener('DOMContentLoaded', function () {
      $('#tablaPacientes').DataTable({
        language: {
          url: 'https://cdn.datatables.net/plug-ins/1.13.6/i18n/es-ES.json'
        },
        responsive: true
      });

      const form = document.getElementById('formPaciente');
      const maxDate = new Date().toISOString().split('T')[0];
      form.querySelector('input[name="fecha_nacimiento"]').max = maxDate;

      form.addEventListener('submit', function (e) {
        const inputs = form.querySelectorAll('input, select');
        let valid = true;

        inputs.forEach(input => {
          const errorDiv = input.nextElementSibling;
          if (errorDiv && errorDiv.classList.contains('text-danger')) {
            if (!input.checkValidity()) {
              errorDiv.classList.remove('d-none');
              valid = false;
            } else {
              errorDiv.classList.add('d-none');
            }
          }
        });

        if (!valid) {
          e.preventDefault();
        }
      });

      // Mostrar modal si el query string tiene abrirModal=1
      const params = new URLSearchParams(window.location.search);
      const abrir = params.get('abrirModal') === '1';
      if (abrir) {
        const modal = new bootstrap.Modal(document.getElementById('nuevoPacienteModal'));
        modal.show();
        // Opcional: limpiar el parámetro de la URL sin recargar la página
        window.history.replaceState({}, document.title, "/pacientes");
      }

      actualizarContadores();
    });

    function toggleEstado(id, button) {
      fetch(`/pacientes/${id}/toggle-estado`, { method: 'POST' })
        .then(response => response.json())
        .then(data => {
          button.textContent = data.estado;
          if (data.estado === 'Activo') {
            button.classList.remove('btn-secondary');
            button.classList.add('btn-success');
            mostrarToast('Paciente activado correctamente.', 'bg-success', 'text-white');
          } else {
            button.classList.remove('btn-success');
            button.classList.add('btn-secondary');
            mostrarToast('Paciente desactivado correctamente.', 'bg-secondary', 'text-white');
          }
        })
        .catch(error => {
          console.error('Error al cambiar el estado:', error);
          mostrarToast('Error al cambiar el estado.', 'bg-warning', 'text-dark');
        });
    }

    function mostrarToast(mensaje, fondo, texto) {
      const toast = document.getElementById('estadoToast');
      const body = document.getElementById('toastBody');
      toast.className = `toast ${fondo} ${texto}`;
      body.textContent = mensaje;
      const bsToast = new bootstrap.Toast(toast);
      bsToast.show();
    }

    function actualizarContadores() {
      const pacientes = !{JSON.stringify(pacientes)};
      const total = pacientes.length;
      const femenino = pacientes.filter(p => p.genero === 'Femenino').length;
      const masculino = pacientes.filter(p => p.genero === 'Masculino').length;

      document.getElementById('totalPacientes').textContent = total;
      document.getElementById('totalFemenino').textContent = femenino;
      document.getElementById('totalMasculino').textContent = masculino;
    }
